from datetime import datetime

from aiogram import Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message
from motor.core import AgnosticDatabase

from src.keyboards import *

router = Router()


class RegStates(StatesGroup):
    waiting_for_university = State()
    waiting_for_course = State()
    waiting_for_speciality = State()
    completed = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext, db: AgnosticDatabase):
    user_id = message.from_user.id
    await db.users.update_one(
        {'user_id': user_id},
        {'$set': {
            'user_id': user_id,
            'username': message.from_user.username,
            'name': message.from_user.first_name,
            'created_at': datetime.now(),
            'state': 'waiting_for_university',
        }},
        upsert=True
    )

    await state.set_state(RegStates.waiting_for_university)
    text = '–ì–æ—Ç–æ–≤–∏–π —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –∑–∞—Ö–æ–ø–ª–∏–≤—É –ø–æ–¥–æ—Ä–æ–∂ –∑ BTW? üöÄ\n–°–ø–µ—Ä—à—É –¥–∞–≤–∞–π —Ç—Ä–æ—Ö–∏ –ø–æ–∑–Ω–∞–π–æ–º–∏–º–æ—Å—è!'
    await message.answer(text)
    text = '–î–µ —Ç–∏ –Ω–∞–≤—á–∞—î—à—Å—è? (–ø–∏—Ç–∞–Ω–Ω—è 1 –∑ 3)'
    await message.answer(text, reply_markup=university_keyboard)


@router.message(RegStates.waiting_for_university)
async def reg_university(message: Message, state: FSMContext, db: AgnosticDatabase):
    await db.users.update_one(
        {'user_id': message.from_user.id},
        {'$set': {
            'university': message.text,
            'last_interaction_at': datetime.now(),
            'state': 'waiting_for_course',
        }}
    )
    await state.set_state(RegStates.waiting_for_course)
    text = '–ù–∞ —è–∫–æ–º—É —Ç–∏ –∫—É—Ä—Å—ñ? (–ø–∏—Ç–∞–Ω–Ω—è 2 –∑ 3)'
    await message.answer(text, reply_markup=course_keyboard)


@router.message(RegStates.waiting_for_course)
async def reg_course(message: Message, state: FSMContext, db: AgnosticDatabase):
    await db.users.update_one(
        {'user_id': message.from_user.id},
        {'$set': {
            'course': message.text,
            'last_interaction_at': datetime.now(),
            'state': 'waiting_for_speciality',
        }}
    )
    await state.set_state(RegStates.waiting_for_speciality)
    text = '–Ø–∫–∞ —Ç–≤–æ—è —Å–ø–µ—Ü—ñ–∞–ª—å–Ω—ñ—Å—Ç—å? (–ø–∏—Ç–∞–Ω–Ω—è 3 –∑ 3)'
    await message.answer(text, reply_markup=speciality_keyboard)


@router.message(RegStates.waiting_for_speciality)
async def reg_speciality(message: Message, state: FSMContext, db: AgnosticDatabase):
    await db.users.update_one(
        {'user_id': message.from_user.id},
        {'$set': {
            'speciality': message.text,
            'last_interaction_at': datetime.now(),
            'state': 'completed',
        }}
    )
    text = '–î—è–∫—É—î–º–æ –∑–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é! –ß–µ–∫–∞—î–º–æ —Ç–µ–±–µ –Ω–∞ BTW! üåü'
    await message.answer(text, reply_markup=main_reply_keyboard)
    text = '–¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Ä–æ–∑–∫–ª–∞–¥ –∑–∞—Ö–æ–¥—É —Ç–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –±—ñ–ª—å—à–µ –ø—Ä–æ –Ω–∞—à–∏—Ö —Å–ø—ñ–∫–µ—Ä—ñ–≤'
    await message.answer(text, reply_markup=main_inline_keyboard)
    await state.clear()
