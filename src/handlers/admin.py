import asyncio
import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile
from motor.core import AgnosticDatabase
from motor.motor_asyncio import AsyncIOMotorCursor

from src.keyboards import *

CODE_WORD = '42–æ–º–Ω–æ–º–Ω–æ–º24'
router = Router()

class AdminStates(StatesGroup):
    waiting_for_send_to_all = State()


@router.message(F.text == CODE_WORD)
async def handle_text_message(message: Message):
    await message.answer('–≤—ñ—Ç–∞—é –≤ –∞–¥–º—ñ–Ω—Ü—ñ', reply_markup=admin_keyboard)


@router.callback_query(F.data == "send_to_all")
async def send_to_all(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=send_to_all_keyboard)
    await state.set_state(AdminStates.waiting_for_send_to_all)


@router.callback_query(F.data == "get_all_users")
async def send_to_all(callback_query: CallbackQuery, db: AgnosticDatabase):
    all_users = await db.users.count_documents({})
    await callback_query.message.answer(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {all_users}")


@router.callback_query(F.data == "get_all_registered_users")
async def send_to_all(callback_query: CallbackQuery, db: AgnosticDatabase):
    all_registered_users = await db.users.count_documents({'state': 'completed'})
    await callback_query.message.answer(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {all_registered_users}")


# —Ç—Ä–µ–±–∞ –¥–æ–±–∞–≤–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –ª–∏—à–µ —Ç–µ–∫—Å—Ç—É
@router.message(AdminStates.waiting_for_send_to_all)
async def send_message_to_all_users(message: Message, state: FSMContext, db: AgnosticDatabase):
    sender_id = message.from_user.id
    text = message.text
    users_cursor: AsyncIOMotorCursor = db.users.find({'user_id': {'$ne': sender_id}}, {'user_id': 1})

    success_count = 0
    fail_count = 0

    async def send_message(user):
        nonlocal success_count, fail_count
        try:
            await message.bot.send_message(user['user_id'], text, parse_mode='HTML')
            success_count += 1
        except Exception as e:
            fail_count += 1
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")

    tasks = []
    async for user in users_cursor:
        tasks.append(asyncio.create_task(send_message(user)))

    await asyncio.gather(*tasks)

    result_text = f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø—ñ—à–Ω–æ: {success_count}\n–ù–µ–≤–¥–∞–ª–æ: {fail_count}"
    await message.answer(result_text)
    await state.clear()

@router.callback_query(F.data == "send_to_all_about_")
async def send_to_all(callback_query: CallbackQuery, db: AgnosticDatabase):
    users_cursor: AsyncIOMotorCursor = db.users.find({}, {'user_id': 1})

    success_count = 0
    fail_count = 0

    logo = FSInputFile('src/data/photo_2025-05-26_17-01-13.jpg')
    text = """<b>–ì–æ—Ç–æ–≤—ñ –∑—É—Å—Ç—Ä—ñ—Ç–∏ —â–µ –æ–¥–∏–Ω –Ω–µ–π–º–æ–≤—ñ—Ä–Ω–∏–π –ø—Ä–æ—î–∫—Ç, —è–∫–∏–π –≤—ñ–¥–∫—Ä–∏—î –¥–≤–µ—Ä—ñ —É —Å–≤—ñ—Ç –∫–∞—Ä º—î—Ä–∏?</b> –¢–æ–¥—ñ –Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä º—î—Ä–∏ 2025 ‚Äì —Å–∞–º–µ –¥–ª—è —Ç–µ–±–µ!

üìÖ <b>–ö–æ–ª–∏?</b> 28‚Äì29 —Ç—Ä–∞–≤–Ω—è  
üìç <b>–î–µ?</b> –õ—å–≤—ñ–≤—Å—å–∫–∞ –ø–æ–ª—ñ—Ç–µ—Ö–Ω—ñ–∫–∞, 4 –Ω.–∫.

<b>–©–æ —Ç–µ–±–µ —á–µ–∫–∞—î?</b>  
üîπ –î–µ—Å—è—Ç–∫–∏ –∫–æ–º–ø–∞–Ω—ñ–π, —â–æ —à—É–∫–∞—é—Ç—å –º–æ–ª–æ–¥–∏—Ö —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç—ñ–≤  
üîπ –¢–∏—Å—è—á—ñ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —Ç–∞ –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤  
üîπ –ù–µ—Ç–≤–æ—Ä–∫—ñ–Ω–≥, –≤–æ—Ä–∫—à–æ–ø–∏, –ø–∞–Ω–µ–ª—å–Ω—ñ –¥–∏—Å–∫—É—Å—ñ—ó  
üîπ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ–π–Ω—ñ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏  
üîπ –ö–æ–Ω–∫—É—Ä—Å–∏, –ø—Ä–∏–∑–∏ —Ç–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–∏

–í–∂–µ 17 —Ä–æ–∫—ñ–≤ –Ü–Ω–∂–µ–Ω–µ—Ä–Ω–∏–π –Ø—Ä–º–∞—Ä–æ–∫ –ö–∞—Ä‚Äô—î—Ä–∏ –¥–æ–ø–æ–º–∞–≥–∞—î —Ä–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –∫–∞—Ä º—î—Ä–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü—ñ–∞–ª —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤.  
<tg-spoiler>–î–æ–ª—É—á–∞–π—Å—è –¥–æ –Ω–∞—Å —Ç–∞ —Ç–≤–æ—Ä–∏ —Å–≤–æ—é —É—Å–ø—ñ—à–Ω—É –∫–∞—Ä º—î—Ä—É!</tg-spoiler>

üì¢ <b>–î–µ—Ç–∞–ª—ñ</b>: <a href="https://ejf-linktree.vercel.app/">—Ç—É—Ç!</a>  
üì≤ <b>–°–ª—ñ–¥–∫—É–π –∑–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º–∏</b>: <a href="https://www.instagram.com/best_lviv?igsh=M294ZDVlczFteHFy">@best_lviv</a>"""

    async for user in users_cursor:
        user_id = user['user_id']
        try:
            await callback_query.message.bot.send_photo(
                user_id,
                photo=logo,
                caption=text,
                parse_mode='HTML',
                reply_markup=send_to_all_about__keyboard
            )
            success_count += 1
        except Exception as e:
            fail_count += 1
            logging.warning(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ {user_id}: {e}")
        await asyncio.sleep(1)  # –∫–æ–Ω—Ç—Ä–æ–ª—å–æ–≤–∞–Ω–∞ –∑–∞—Ç—Ä–∏–º–∫–∞

    result_text = f"‚úÖ –†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø—ñ—à–Ω–æ: {success_count}\n–ù–µ–≤–¥–∞–ª–æ: {fail_count}"
    await callback_query.message.answer(result_text)
