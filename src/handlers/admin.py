import asyncio
import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile
from motor.core import AgnosticDatabase
from motor.motor_asyncio import AsyncIOMotorCursor

from src.keyboards import *

CODE_WORD = '42–æ–º–Ω–æ–º–Ω–æ–º24'
router = Router()

class AdminStates(StatesGroup):
    waiting_for_send_to_all = State()


@router.message(F.text == CODE_WORD)
async def handle_text_message(message: Message):
    await message.answer('–≤—ñ—Ç–∞—é –≤ –∞–¥–º—ñ–Ω—Ü—ñ', reply_markup=admin_keyboard)


@router.callback_query(F.data == "send_to_all")
async def send_to_all(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=send_to_all_keyboard)
    await state.set_state(AdminStates.waiting_for_send_to_all)


@router.callback_query(F.data == "get_all_users")
async def send_to_all(callback_query: CallbackQuery, db: AgnosticDatabase):
    all_users = await db.users.count_documents({})
    await callback_query.message.answer(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {all_users}")


@router.callback_query(F.data == "get_all_registered_users")
async def send_to_all(callback_query: CallbackQuery, db: AgnosticDatabase):
    all_registered_users = await db.users.count_documents({'state': 'completed'})
    await callback_query.message.answer(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {all_registered_users}")


# —Ç—Ä–µ–±–∞ –¥–æ–±–∞–≤–∏—Ç–∏ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –ª–∏—à–µ —Ç–µ–∫—Å—Ç—É
@router.message(AdminStates.waiting_for_send_to_all)
async def send_message_to_all_users(message: Message, state: FSMContext, db: AgnosticDatabase):
    sender_id = message.from_user.id
    text = message.text
    users_cursor: AsyncIOMotorCursor = db.users.find({'user_id': {'$ne': sender_id}}, {'user_id': 1})

    success_count = 0
    fail_count = 0

    async def send_message(user):
        nonlocal success_count, fail_count
        try:
            await message.bot.send_message(user['user_id'], text, parse_mode='HTML')
            success_count += 1
        except Exception as e:
            fail_count += 1
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")

    tasks = []
    async for user in users_cursor:
        tasks.append(asyncio.create_task(send_message(user)))

    await asyncio.gather(*tasks)

    result_text = f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø—ñ—à–Ω–æ: {success_count}\n–ù–µ–≤–¥–∞–ª–æ: {fail_count}"
    await message.answer(result_text)
    await state.clear()

@router.callback_query(F.data == "send_to_all_about_")
async def send_to_all(callback_query: CallbackQuery, db: AgnosticDatabase):
    users_cursor: AsyncIOMotorCursor = db.users.find({}, {'user_id': 1})

    success_count = 0
    fail_count = 0

    logo = FSInputFile('src/data/photo_2025-03-05_10-29-49.jpg')
    text = """üî• <b>–û–¢–†–ò–ú–ê–ô –§–£–¢–ë–û–õ–ö–£, –®–ö–ê–†–ü–ï–¢–ö–ò –Ü –®–û–ü–ï–† –í–ñ–ï –¶–¨–û–ì–û –ß–ï–¢–í–ï–†–ì–ê!</b>
–ü—Ä–æ—Å—Ç–æ –≤–∫–∞–∂–∏ —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ –≤ <a href="https://cutt.ly/HrtPhRvB">—Ñ–æ—Ä–º—ñ</a>
–ê —Ç–∞–∫–æ–∂ –ø—Ä–∏—Ö–æ–¥—å –¥–æ –Ω–∞—Å –≤–∂–µ –≤ —Ü–µ–π —á–µ—Ç–≤–µ—Ä –≤ 4 –∫–æ—Ä–ø—É—Å, 214 –∞—É–¥.
üï† 16:30 ‚Äì –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—è –ø—Ä–æ <b>BEST</b>

–£–Ω—ñ–≤–µ—Ä, –ø–∞—Ä–∏, –¥—ñ–º ‚Äì —ñ —Ç–∞–∫ –ø–æ –∫–æ–ª—É? üò¥ –í—ñ–¥—á—É–≤–∞—î—à, —â–æ —Å—Ç—É–¥–µ–Ω—Ç—Å—å–∫–µ –∂–∏—Ç—Ç—è –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –ø–æ–≤–∑?

–ß–∞—Å —Ü–µ –∑–º—ñ–Ω–∏—Ç–∏! <b>BEST</b> ‚Äî —Ü–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ –Ω–∞–≤—á–∞–Ω–Ω—è, –∞ –ø—Ä–æ –∫—Ä—É—Ç–∏–π –¥–æ—Å–≤—ñ–¥, –ø–æ–¥–æ—Ä–æ–∂—ñ, –∑–Ω–∞–π–æ–º—Å—Ç–≤–∞ —Ç–∞ —Ä–æ–∑–≤–∏—Ç–æ–∫. –¢—É—Ç —Ç–∏ –∑–º–æ–∂–µ—à:
<b>–ü—Ä–æ–∫–∞—á–∞—Ç–∏ —Å–∫—ñ–ª–∏</b> (Figma, Python, JavaScript —Ç–æ—â–æ)
<b>–û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É–≤–∞—Ç–∏ –∑–∞—Ö–æ–¥–∏ —Ç–∞ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –≤ –∫–æ–º–∞–Ω–¥—ñ</b>
<b>–ë—Ä–∞—Ç–∏ —É—á–∞—Å—Ç—å —É –º–∞—Å—à—Ç–∞–±–Ω–∏—Ö —ñ–≤–µ–Ω—Ç–∞—Ö:</b> BEST Hackath0n, Training Week, Engineering Competition

–ü—Ä–∏—Ö–æ–¥—å –Ω–∞ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü—ñ—é —Ç–∞ –¥—ñ–∑–Ω–∞–π—Å—è, —è–∫ —Å—Ç–∞—Ç–∏ —á–∞—Å—Ç–∏–Ω–æ—é —Ü—å–æ–≥–æ –≤—Å—å–æ–≥–æ! 

–í—Å—Ç–∏–≥–Ω–∏ <a href="https://cutt.ly/HrtPhRvB">–ø–æ—Ç—Ä–∞–ø–∏—Ç–∏ –¥–æ –Ω–∞—Å</a> –¥–æ 09.03!
Stop being better. Start being BEST!"""

    async def send_message(user):
        nonlocal success_count, fail_count
        try:
            await callback_query.message.bot.send_photo(user['user_id'], logo, caption=text, parse_mode='HTML',
                                                        reply_markup=send_to_all_about__keyboard)
            await asyncio.sleep(0.5)
            success_count += 1
        except Exception as e:
            fail_count += 1
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")

    tasks = []
    async for user in users_cursor:
        tasks.append(asyncio.create_task(send_message(user)))

    await asyncio.gather(*tasks)

    result_text = f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø—ñ—à–Ω–æ: {success_count}\n–ù–µ–≤–¥–∞–ª–æ: {fail_count}"
    await callback_query.message.answer(result_text)