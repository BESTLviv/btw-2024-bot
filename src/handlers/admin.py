import asyncio
import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile
from motor.core import AgnosticDatabase
from motor.motor_asyncio import AsyncIOMotorCursor

from src.keyboards import *

CODE_WORD = '–æ–º–Ω–æ–º–Ω–æ–º3'
router = Router()


class AdminStates(StatesGroup):
    waiting_for_send_to_all = State()


@router.message(lambda message: message.text.lower() == CODE_WORD.lower())
async def handle_text_message(message: Message):
    await message.answer('–≤—ñ—Ç–∞—é –≤ –∞–¥–º—ñ–Ω—Ü—ñ3', reply_markup=admin_keyboard)


@router.callback_query(F.data == "send_to_all")
async def send_to_all(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=send_to_all_keyboard)
    await state.set_state(AdminStates.waiting_for_send_to_all)


@router.callback_query(F.data == "get_all_users")
async def send_to_all(callback_query: CallbackQuery, db: AgnosticDatabase):
    all_users = await db.users.count_documents({})
    await callback_query.message.answer(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {all_users}")


@router.callback_query(F.data == "get_all_registered_users")
async def send_to_all(callback_query: CallbackQuery, db: AgnosticDatabase):
    all_registered_users = await db.users.count_documents({'state': 'completed'})
    await callback_query.message.answer(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {all_registered_users}")


@router.callback_query(F.data == "send_to_all_bec")
async def send_to_all(callback_query: CallbackQuery, db: AgnosticDatabase):
    users_cursor: AsyncIOMotorCursor = db.users.find({}, {'user_id': 1})

    success_count = 0
    fail_count = 0

    logo = FSInputFile('src/data/photo_2024-10-02_15-55-21.jpg')
    text = """–Ü–Ω–∂–µ–Ω–µ—Ä–∏ –Ω–∞ –∑–≤‚Äô—è–∑–∫—É!

‚ùóÔ∏è–ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ, —â–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ BEC‚Äô2024 –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–æ –¥–æ <b>17.10 23:59</b>‚ùóÔ∏è

–ù–µ —É–ø—É—Å–∫–∞–π –Ω–∞–≥–æ–¥—É –∑–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è, –∞–¥–∂–µ <b>–¥–µ–¥–ª–∞–π–Ω —É–∂–µ –∑–æ–≤—Å—ñ–º –±–ª–∏–∑—å–∫–æ!</b>

üí°–û–±–∏—Ä–∞–π –æ–¥–Ω—É –∑ –¥–≤–æ—Ö –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:

üîó<b>Case Study</b>: —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ —Ä—ñ—à–µ–Ω–Ω—è –¥–ª—è –∑–∞–¥–∞—á –≤ —ñ–Ω–∂–µ–Ω–µ—Ä—ñ—ó, –±—É–¥—ñ–≤–Ω–∏—Ü—Ç–≤—ñ —Ç–∞ –≤—ñ–π—Å—å–∫–æ–≤—ñ–π —Å—Ñ–µ—Ä—ñ.  

‚öôÔ∏è<b>Team Design</b>: —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø—É –∞–±–æ —Å–∏—Å—Ç–µ–º–∏ —É —Å—Ñ–µ—Ä–∞—Ö IoT, –µ–ª–µ–∫—Ç—Ä–æ–Ω—ñ–∫–∏, –º–µ—Ö–∞–Ω—ñ–∫–∏ –∑ –≤—ñ–π—Å—å–∫–æ–≤–∏–º —Å–ø—Ä—è–º—É–≤–∞–Ω–Ω—è–º.  

–ó–Ω–∞—Ö–æ–¥—å –æ–¥–Ω–æ–¥—É–º—Ü—ñ–≤ —É —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ–º—É —á–∞—Ç—ñ –¥–ª—è –ø–æ—à—É–∫—É –∫–æ–º–∞–Ω–¥  ‚Äî –∑–±–µ—Ä—ñ—Ç—å —Å–≤–æ—é —á–µ—Ç–≤—ñ—Ä–∫—É —ñ –ø–æ–∫–æ—Ä—ñ—Ç—å —Ü—ñ –∑–º–∞–≥–∞–Ω–Ω—è.üî•

–Ø–∫—â–æ –±–æ—ó—à—Å—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ –ø–∞—Ä–∏ —Ç–∞ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ —à–∞–ø—Ü—ñ ‚Äî –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π, —Ç–∏ –º–∞—Ç–∏–º–µ—à –æ—Ñ—ñ—Ü—ñ–π–Ω–µ –∑–≤—ñ–ª—å–Ω–µ–Ω–Ω—è –∑ –¥–µ–∫–∞–Ω–∞—Ç—É –Ω–∞ —á–∞—Å –∑–º–∞–≥–∞–Ω—å!

–ù–µ –∑–≤–æ–ª—ñ–∫–∞–π ‚Äî —Ä–µ—î—Å—Ç—Ä—É–π—Å—è!
–•–æ—á–µ–º–æ –±–∞—á–∏—Ç–∏ —Å–∞–º–µ <b>—Ç–µ–±–µ</b> –Ω–∞ BEC‚Äô2024ü´µ"""

    async def send_message(user):
        nonlocal success_count, fail_count
        try:
            await callback_query.message.bot.send_photo(user['user_id'], logo, caption=text, parse_mode='HTML',
                                                        reply_markup=bec_keyboard)
            await asyncio.sleep(0.5)
            success_count += 1
        except Exception as e:
            fail_count += 1
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")

    tasks = []
    async for user in users_cursor:
        tasks.append(asyncio.create_task(send_message(user)))

    await asyncio.gather(*tasks)

    result_text = f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø—ñ—à–Ω–æ: {success_count}\n–ù–µ–≤–¥–∞–ª–æ: {fail_count}"
    await callback_query.message.answer(result_text)


@router.message(AdminStates.waiting_for_send_to_all)
async def send_message_to_all_users(message: Message, state: FSMContext, db: AgnosticDatabase):
    sender_id = message.from_user.id
    text = message.text
    users_cursor: AsyncIOMotorCursor = db.users.find({'user_id': {'$ne': sender_id}}, {'user_id': 1})

    success_count = 0
    fail_count = 0

    async def send_message(user):
        nonlocal success_count, fail_count
        try:
            await message.bot.send_message(user['user_id'], text, parse_mode='HTML')
            success_count += 1
        except Exception as e:
            fail_count += 1
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")

    tasks = []
    async for user in users_cursor:
        tasks.append(asyncio.create_task(send_message(user)))

    await asyncio.gather(*tasks)

    result_text = f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø—ñ—à–Ω–æ: {success_count}\n–ù–µ–≤–¥–∞–ª–æ: {fail_count}"
    await message.answer(result_text)
    await state.clear()
