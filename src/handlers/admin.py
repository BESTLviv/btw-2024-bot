import asyncio
import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import Message, CallbackQuery, FSInputFile
from motor.core import AgnosticDatabase
from motor.motor_asyncio import AsyncIOMotorCursor

from src.keyboards import *

CODE_WORD = '–æ–º–Ω–æ–º–Ω–æ–º2'
router = Router()


class AdminStates(StatesGroup):
    waiting_for_send_to_all = State()


@router.message(lambda message: message.text.lower() == CODE_WORD.lower())
async def handle_text_message(message: Message):
    await message.answer('–≤—ñ—Ç–∞—é –≤ –∞–¥–º—ñ–Ω—Ü—ñ2', reply_markup=admin_keyboard)


@router.callback_query(F.data == "send_to_all")
async def send_to_all(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.answer("–í–≤–µ–¥—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è —Ä–æ–∑—Å–∏–ª–∫–∏:", reply_markup=send_to_all_keyboard)
    await state.set_state(AdminStates.waiting_for_send_to_all)


@router.callback_query(F.data == "get_all_users")
async def send_to_all(callback_query: CallbackQuery, db: AgnosticDatabase):
    all_users = await db.users.count_documents({})
    await callback_query.message.answer(f"–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {all_users}")


@router.callback_query(F.data == "get_all_registered_users")
async def send_to_all(callback_query: CallbackQuery, db: AgnosticDatabase):
    all_registered_users = await db.users.count_documents({'state': 'completed'})
    await callback_query.message.answer(f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {all_registered_users}")


@router.callback_query(F.data == "send_to_all_bec")
async def send_to_all(callback_query: CallbackQuery, db: AgnosticDatabase):
    users_cursor: AsyncIOMotorCursor = db.users.find({}, {'user_id': 1})

    success_count = 0
    fail_count = 0

    video_path = 'src/data/IMG_3028.MP4'
    video = FSInputFile(video_path)
    text = """–•–∞–π —Ç–∞–º —â–æ —Å—Ç–∞–Ω–µ—Ç—å—Å—è —É –∂–∏—Ç—Ç—ñ, —Å–∞–º–µ —ñ–Ω–∂–µ–Ω–µ—Ä–∏ –∑–∞–≤–∂–¥–∏ –≤—ñ–¥–±—É–¥–æ–≤—É–≤–∞–ª–∏ —Ü–µ–π —Å–≤—ñ—Çüë∑
–°—å–æ–≥–æ–¥–Ω—ñ –º–∏ —Ä–∞–¥—ñ –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏, —â–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –Ω–∞ BEST Engineering Competition –≤—ñ–¥–∫—Ä–∏—Ç–æ!

<b>–ü–æ–¥—ñ—è –≤—ñ–¥–±—É–¥–µ—Ç—å—Å—è –≤–∂–µ –∑–æ–≤—Å—ñ–º —Å–∫–æ—Ä–æ, –∞ —Å–∞–º–µ 25-29 –∂–æ–≤—Ç–Ω—è —É –õ—å–≤–æ–≤—ñ.</b>

–¢–µ–º–∞—Ç–∏–∫–∞ —Ü—å–æ–≥–æ—Ä—ñ—á–Ω–∏—Ö –∑–º–∞–≥–∞–Ω—å ‚Äî <b>military</b>, —Ç–æ–º—É –≤—Å—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –±—É–¥—É—Ç—å —Å–ø—Ä—è–º–æ–≤–∞–Ω—ñ –Ω–∞ —Ä–æ–∑–≤‚Äô—è–∑–∞–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º –¥–æ—Ç–∏—á–Ω–∏—Ö –¥–æ –≤—ñ–π–Ω–∏ —á–∏ –ø–æ–≤–æ—î–Ω–Ω–æ—ó –≤—ñ–¥–±—É–¥–æ–≤–∏.

–î–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –Ω–∞ –≤–∏–±—ñ—Ä –ø—Ä–æ–ø–æ–Ω—É—é—Ç—å –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å–≤–æ—ó —è–∫ –ø—Ä–∞–∫—Ç–∏—á–Ω—ñ (<b>Team Design</b>), —Ç–∞–∫ —ñ —Ç–µ–æ—Ä–µ—Ç–∏—á–Ω—ñ (<b>Case Study</b>) –∑–Ω–∞–Ω–Ω—è —Ç–∞ –Ω–∞–≤–∏—á–∫–∏.‚öôÔ∏è

–ß–æ–º—É –∑–≤–æ–ª—ñ–∫–∞—î—à?
<b>–†–µ—î—Å—Ç—Ä—É–π—Å—è –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –Ω–∏–∂—á–µ —ñ –¥–æ–≤–µ–¥–∏, —â–æ –º–∞–π–±—É—Ç–Ω—î –∑–∞ —ñ–Ω–∂–µ–Ω–µ—Ä–∞–º–∏!</b>"""

    async def send_message(user):
        nonlocal success_count, fail_count
        try:
            await callback_query.message.bot.send_video(user['user_id'], video, caption=text, parse_mode='HTML', reply_markup=bec_keyboard)
            success_count += 1
        except Exception as e:
            fail_count += 1
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")

    tasks = []
    async for user in users_cursor:
        tasks.append(asyncio.create_task(send_message(user)))

    await asyncio.gather(*tasks)

    result_text = f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø—ñ—à–Ω–æ: {success_count}\n–ù–µ–≤–¥–∞–ª–æ: {fail_count}"
    await callback_query.message.answer(result_text)


@router.message(AdminStates.waiting_for_send_to_all)
async def send_message_to_all_users(message: Message, state: FSMContext, db: AgnosticDatabase):
    sender_id = message.from_user.id
    text = message.text
    users_cursor: AsyncIOMotorCursor = db.users.find({'user_id': {'$ne': sender_id}}, {'user_id': 1})

    success_count = 0
    fail_count = 0

    async def send_message(user):
        nonlocal success_count, fail_count
        try:
            await message.bot.send_message(user['user_id'], text, parse_mode='HTML')
            success_count += 1
        except Exception as e:
            fail_count += 1
            logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É {user['user_id']}: {e}")

    tasks = []
    async for user in users_cursor:
        tasks.append(asyncio.create_task(send_message(user)))

    await asyncio.gather(*tasks)

    result_text = f"–†–æ–∑—Å–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø—ñ—à–Ω–æ: {success_count}\n–ù–µ–≤–¥–∞–ª–æ: {fail_count}"
    await message.answer(result_text)
    await state.clear()
